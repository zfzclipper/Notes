Python is good for web service development.
Guava: Google Core Libraries for Java
Jenkins: open-source continuous integration server built with Java, which provides plugins to support building and testing virtually any project.
Keyboard shortcuts for gmail (needs to be turned on first)
	- c		# compose
	- o		# open a selected conversation
	- u		# go back to conversation list
	- j		# go to older conversations
	- k		# go to newer conversations
	- /		# search
AUTOCONF ./config

JSON file format
Protocol Buffer: a method of serializing structured data.
What server provides: 
	[1]Container APIs for low level processing (e.g. routing/serializing requests)
	[2]Language which supports convenient text processing, quick development, etc. (e.g. Java/Python/Node.js)
Node.js: 
	[1]open source, cross-platform runtime environment for server-side and networking applications written in JavaScript.
	[2]event-driven architecture and a non-blocking I/O API that optimizes an application's throughput and scalability. 
Postman: HTTP Request composer
Pythondebugger is not suitable for server application debugging due to concurrency issues. Instead logging info should be used.
Python: raw_input([arg]), presents a prompt to the user, gets input from the user and returns the data input by the user in a string.
Python: xrange vs. range
Python: s[:n] + s[n:] == s
Python: s[i:i] empty string, s[:] whole string
Python string is immutable, semantically-mutable function on string will return a new string
Python list is mutable
Python: * operator on list
Python: b = a, assign reference vs. b = a[:], assign copy
Python dictionary key is immutable, key must implement hash function
Python tuple is immutable, could be used as dictionary key
	list in a tuple is still mutable: x = (1, 2, [3, 4])
Python: single element tuple: ('a',)
Python: list comprehension semantics: [<expr> for <var> in <list> if <expr>]
Python: get the intersection of two lists
	- Using filter and lambda: filter(lambda x: x in <list2>, <list1>)
	- Using list comprehension: [x for x in list1 if x in list2]
Python: reduce(function, sequence) ----> iteratively apply function
		returns a single value constructed by calling the (binary) function on the first two items of the sequence, 
		then on the result and the next item, and so on.
Python: closure is a function object that remembers values in enclosing scopes.
Java: Difference between ".=" operator and "==" operator


Git: git init	# Transform the current directory into a Git repository (Create a .git sub-directory)
Git: For virtually all Git workflows, the central repository is bare, and developers local repositories are non-bare.
	 git init --bare <repo_name>.git	# Create a bare central repository
	 git clone <repo_name>.git
Github: 
	 git init
	 git add 
	 git commit
	 git remote add origin remote repository URL
	 git remote -v
	 git push origin master
Git: git log --graph --oneline --decorate --date=relative --all
Git: git diff				# displays changes in working directory (not staged changes)
	 git diff --cached		# displays changes in stage directory/index
Git: git show <hashcode>
Git: *git bisect
Git: git blame
Git: git reset vs. git checkout vs. git revert
	 working directory ----> staged snapshot ----> commit history
	 - git reset: This can be used to remove commits from the current branch. Throw away these commits.
				  a simple way to undo changes that haven’t been shared with anyone else.
				  reset a file updates the staged snapshot to match the version from the specified commit.
	 - git checkout: Move HEAD to a different branch and update the working directory to match.
					 useful for quickly inspecting an old version of your project. 
					 Always create a new branch before adding commits to a detached HEAD.
					 Checking out a file updates the working directory instead of the stage.
	 - git revert: Undo a commit by creating a new commit.
Git: *git merge vs. git rebase
	 - git merge:
			- Merging is a non-destructive operation(existing branches are not changed in any way). 
Git: git merge --no-ff <branch>
	 Merge the specified branch into the current branch, but always generate a merge commit (even if it was a fast-forward merge).
	 Fast forward merge: When there is a linear path from the current branch tip to the target branch, 
						 move (i.e., "fast forward") the current branch tip up to the target branch tip, without adding a new merge commit.
Git: *git fetch vs. git pull
	 git pull <==> git fetch + git merge
	 - git fetch: imports commits from a remote repository into your local repo. 
				  The resulting commits are stored as "remote branches" instead of the normal local branches that we’ve been working with.
				  Fetching is a safe way to review commits before integrating them with your local repository.
	 - git pull: Merge upstream changes into your local repository.
				 Fetch the specified remote's copy of the current branch and immediately merge it into the local copy.
Git: git push <remote> --force
	 Git prevents overwriting the central repository's history by refusing push requests when they result in a non-fast-forward merge.
	 The force flage makes remote repository's branch match your local one, deleting any upstream changes that occurred since you last pulled.
Git: git cat-file -p
Git: git commit is atomic and immutable

Anatomy on an app:
Client										 Server
Web Page(UI widget, HTML)		<------>	services	<------> Database(DB) (meta data)
Mobile App(Android UI widget)	<------>				<------> File System(FS) (raw data)
														<------> Suggestion Service (cron job, running machine learning algorithms)






Mini-project

App Engine application
	- Python
	- Web application framework: webapp2
	- App Engine datastore, Python modeling API
	- User authentication: Google Account
	- Templating language for Python: Jinja2
	- Upload app to App Engine

Development Flow
[1]Create a directory. 
	- All files for this application reside in this directory.
		- python script(.py): defines request handler
		- configuration file(app.yaml): 
			- specifies how URL paths correspond to request handlers and static files.
			- contains information about the application code.
			- must be located in your application's root directory.

configuration file elements:
- runtime: App Engine runtime environment name
- api_version: API version in the given runtime environment used by this application
- handlers: list of URL patterns and descriptions of how they should be handled
	- script handlers: 
		- Executes a Python script to handle the request that matches the URL pattern.
		- The mapping defines a URL pattern to match, and the script to be executed.
	- static file handlers:
		- Static files are files to be served directly to the user for a given URL (e.g. images, CSS stylesheets, JavaScript source files, etc.)
		- Static file handlers describe which files in the application directory are static files, and which URLs serve them.
 - threadsafe: configures your application to use concurrent requests. 

handler script
- RequestHandler classes: process requests and build responses
- WSGIApplication instance: represent application itself, and route incoming requests to handlers based on the URL

Web Server Gateway Interface (WSGI): interface between web servers and web applications/frameworks for Python 
Web Application Framework
Google App Engine Service
 - Users service:  lets your application integrate with Google user accounts. 
	- Users API

Requisites:
[1]Google App Engine SDK



Gitflow workflow vs. Forking workflow

================
Gitflow workflow
================
- It assigns very specific roles to different branches and defines how and when they should interact.
- It uses individual branches for preparing, maintaining, and recording releases. 
- It uses two branches to record the history of the project. 

master branch 
	stores the official release history

develop branch 
	serves as an integration branch for features.

feature branches
	each new feature should reside in its own (feature)branch
	use develop as their parent branch
	when a feature is complete, it gets merged back into develop. 
	features should never interact directly with master.

release branch
	a dedicated branch to prepare releases 
	act as a buffer between feature development (develop) and public releases (master).
	no new features can be added after this point
	only bug fixes, documentation generation, and other release-oriented tasks should go in this branch.
	it's possible for one team to polish the current release while another team continues working on features for the next release.
	It also creates well-defined phases of development

maintenance branch
	used to quickly patch production releases. 
	the only branch that should fork directly off of master.

================
Forking workflow
================
Instead of using a single server-side repository to act as the “central” codebase, it gives every developer a server-side repository.
each contributor has two Git repositories: 
[1]a private local one;
[2]a public server-side one;

Developers push to their own server-side repositories, and only the project maintainer can push to the official repository.


a new developer fork(instead of clone) the official repository to create a copy of it on the server. 
This new copy serves as their personal public repository
	no other developers are allowed to push to it, but they can pull changes from it
	After they have created their server-side copy, the developer performs a git clone to get a copy of it onto their local machine.
forking is basically just a server-side clone
